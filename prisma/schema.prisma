// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  phone     String?  @unique
  email     String?  @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]

  purchaseProducts Product[] @relation(name: "purchaseProduct")
  saleProducts     Product[] @relation(name: "saleProduct")

  purchaserChatRooms ChatRoom[] @relation(name: "purchaseChat")
  sellerChatRooms    ChatRoom[] @relation(name: "saleChat")

  stories  Story[]
  comments Comment[]
  likes    Like[]

  writtenReviews  Review[]  @relation(name: "writtenReviews")
  receivedReviews Review[]  @relation(name: "receivedReviews")
  Record          Record[]
  Messages        Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  seller      User       @relation(name: "saleProduct", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId    Int
  purchaser   User?      @relation(name: "purchaseProduct", fields: [purchaserId], references: [id], onDelete: Cascade)
  purchaserId Int?        @default(0)
  sellState   String     @default("selling")
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  records     Record[]
  chatRooms   ChatRoom[]

  @@index([sellerId])
  @@index([purchaserId])
}

model Story {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  content   String    @db.MediumText
  comments  Comment[]
  likes     Like[]

  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int
  comment   String   @db.MediumText

  @@index([userId])
  @@index([storyId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int

  @@index([userId])
  @@index([storyId])
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  score        Int
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdById  Int
  createdForId Int

  @@index([createdById])
  @@index([createdForId])
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  kind      Kind

  @@index([userId])
  @@index([productId])
}
enum Kind {
  Purchase
  Favorite
  Sale
}

model Message {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  message    String
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int?

  @@index([userId])
  @@index([chatRoomId])
}

model ChatRoom {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  purchaser   User @relation(name: "purchaseChat", fields: [purchaserId], references: [id], onDelete: Cascade)
  purchaserId Int

  seller   User @relation(name: "saleChat", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId Int

  @@index([productId])
  @@index([purchaserId])
  @@index([sellerId])
}


